/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.io.FileInputStream;
import java.io.InputStream;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.Term;
import org.apache.lucene.index.IndexWriterConfig.OpenMode;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.tika.metadata.Metadata;
import org.apache.commons.lang3.StringUtils;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.tika.exception.TikaException;
import org.apache.tika.parser.AutoDetectParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.sax.BodyContentHandler;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;

/**
 *
 * @author phong97
 */
public class DesktopSearchEngineUI extends javax.swing.JFrame {
	/**
	 * Creates new form DesktopSearchEngineUI
	 */
	public DesktopSearchEngineUI() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jpnlConfig = new javax.swing.JPanel();
		jlblDocsDir = new javax.swing.JLabel();
		jtxtDocsDir = new javax.swing.JTextField();
		jlblIndexDir = new javax.swing.JLabel();
		jtxtIndexDir = new javax.swing.JTextField();
		jbtnDocsDirBrowse = new javax.swing.JButton();
		jbtnIndexDirBrowse = new javax.swing.JButton();
		jbtnIndex = new javax.swing.JButton();
		jpnlSearch = new javax.swing.JPanel();
		jbtnSearch = new javax.swing.JButton();
		jlblQuery = new javax.swing.JLabel();
		jtxtQuery = new javax.swing.JTextField();
		jpnlResults = new javax.swing.JPanel();
		jscpResults = new javax.swing.JScrollPane();
		jtblResults = new javax.swing.JTable();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Simple Desktop Search Engine");

		jpnlConfig.setBorder(javax.swing.BorderFactory.createTitledBorder("Config"));
		jpnlConfig.setToolTipText("");

		jlblDocsDir.setText("Docs Dir");
		jlblDocsDir.setName("jlblDocsDir"); // NOI18N

		jlblIndexDir.setText("Index Dir");
		jlblIndexDir.setName("jlblIndexDir"); // NOI18N

		jtxtIndexDir.setName("jtxtIndexDir"); // NOI18N

		jbtnDocsDirBrowse.setText("Browse");
		jbtnDocsDirBrowse.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbtnDocsDirBrowseActionPerformed(evt);
			}
		});

		jbtnIndexDirBrowse.setText("Browse");
		jbtnIndexDirBrowse.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbtnIndexDirBrowseActionPerformed(evt);
			}
		});

		jbtnIndex.setText("Index");
		jbtnIndex.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					jbtnIndexActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		javax.swing.GroupLayout jpnlConfigLayout = new javax.swing.GroupLayout(jpnlConfig);
		jpnlConfig.setLayout(jpnlConfigLayout);
		jpnlConfigLayout.setHorizontalGroup(jpnlConfigLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpnlConfigLayout.createSequentialGroup()
						.addGroup(jpnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jpnlConfigLayout.createSequentialGroup().addGap(90, 90, 90)
										.addGroup(jpnlConfigLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jlblIndexDir).addComponent(jlblDocsDir))
										.addGap(18, 18, 18)
										.addGroup(jpnlConfigLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(jtxtDocsDir).addComponent(jtxtIndexDir,
														javax.swing.GroupLayout.PREFERRED_SIZE, 449,
														javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(50, 50, 50)
										.addGroup(jpnlConfigLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jbtnDocsDirBrowse).addComponent(jbtnIndexDirBrowse)))
								.addGroup(jpnlConfigLayout.createSequentialGroup().addGap(357, 357, 357)
										.addComponent(jbtnIndex)))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		jpnlConfigLayout.setVerticalGroup(jpnlConfigLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpnlConfigLayout.createSequentialGroup().addContainerGap()
						.addGroup(jpnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jlblDocsDir, javax.swing.GroupLayout.PREFERRED_SIZE, 24,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jtxtDocsDir, javax.swing.GroupLayout.PREFERRED_SIZE, 24,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jbtnDocsDirBrowse))
						.addGap(23, 23, 23)
						.addGroup(jpnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jtxtIndexDir, javax.swing.GroupLayout.PREFERRED_SIZE, 24,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jlblIndexDir, javax.swing.GroupLayout.PREFERRED_SIZE, 24,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jbtnIndexDirBrowse))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jbtnIndex)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		jlblDocsDir.getAccessibleContext().setAccessibleName("jlblDocsDir");
		jlblDocsDir.getAccessibleContext().setAccessibleDescription("");
		jtxtDocsDir.getAccessibleContext().setAccessibleName("jtxtDocsDir");
		jlblIndexDir.getAccessibleContext().setAccessibleName("jlblIndexDir");
		jtxtIndexDir.getAccessibleContext().setAccessibleName("jtxtIndexDir");
		jbtnDocsDirBrowse.getAccessibleContext().setAccessibleName("jbtnDocsDirBrowse");
		jbtnIndexDirBrowse.getAccessibleContext().setAccessibleName("jbtnIndexDirBrowse");
		jbtnIndex.getAccessibleContext().setAccessibleName("jbtnIndex");

		jpnlSearch.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));

		jbtnSearch.setText("Search");
		jbtnSearch.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					jbtnSearchActionPerformed(evt);
				} catch (IOException | ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		jlblQuery.setText("Query");
		jlblQuery.setName("jlblIndexDir"); // NOI18N

		jtxtQuery.setName("jtxtIndexDir"); // NOI18N

		javax.swing.GroupLayout jpnlSearchLayout = new javax.swing.GroupLayout(jpnlSearch);
		jpnlSearch.setLayout(jpnlSearchLayout);
		jpnlSearchLayout
				.setHorizontalGroup(jpnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
								jpnlSearchLayout.createSequentialGroup()
										.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jlblQuery).addGap(31, 31, 31)
										.addComponent(jtxtQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 450,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(53, 53, 53).addComponent(jbtnSearch).addGap(83, 83, 83)));
		jpnlSearchLayout.setVerticalGroup(jpnlSearchLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpnlSearchLayout.createSequentialGroup().addContainerGap().addGroup(jpnlSearchLayout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jpnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jtxtQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 24,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jlblQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 24,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addComponent(jbtnSearch))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		jbtnSearch.getAccessibleContext().setAccessibleName("jbtnSearch");
		jlblQuery.getAccessibleContext().setAccessibleName("jlblQuery");
		jtxtQuery.getAccessibleContext().setAccessibleName("jtxtQuery");

		jpnlResults.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

		jtblResults.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null }, { null, null }, { null, null }, { null, null } },
				new String[] { "File Name", "Score" }));
		jtblResults.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jtblResultsMouseClicked(evt);
			}
		});
		jscpResults.setViewportView(jtblResults);

		javax.swing.GroupLayout jpnlResultsLayout = new javax.swing.GroupLayout(jpnlResults);
		jpnlResults.setLayout(jpnlResultsLayout);
		jpnlResultsLayout
				.setHorizontalGroup(jpnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jpnlResultsLayout.createSequentialGroup().addContainerGap()
								.addComponent(jscpResults, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
								.addContainerGap()));
		jpnlResultsLayout
				.setVerticalGroup(jpnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jpnlResultsLayout.createSequentialGroup().addContainerGap()
								.addComponent(jscpResults, javax.swing.GroupLayout.PREFERRED_SIZE, 255,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jpnlResults, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jpnlConfig, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jpnlSearch, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addComponent(jpnlConfig, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jpnlSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addComponent(jpnlResults, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		jpnlConfig.getAccessibleContext().setAccessibleName("");

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jbtnDocsDirBrowseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbtnDocsDirBrowseActionPerformed
		JFileChooser jfc = new JFileChooser();
		jfc.setCurrentDirectory(new java.io.File("."));
		jfc.setDialogTitle("Choose directory to index");
		jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		jfc.setAcceptAllFileFilterUsed(false);

		if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
			jtxtDocsDir.setText(jfc.getCurrentDirectory().getPath());
		}
	}// GEN-LAST:event_jbtnDocsDirBrowseActionPerformed

	private void jbtnIndexActionPerformed(java.awt.event.ActionEvent evt) throws IOException {// GEN-FIRST:event_jbtnIndexActionPerformed
		String docsDir = jtxtDocsDir.getText().trim();
		String indexDir = jtxtIndexDir.getText().trim();

		// Add your code here to index files
		Path path = Paths.get(docsDir);
		Directory dir = FSDirectory.open(Paths.get(indexDir));
		Analyzer analyzer = new StandardAnalyzer();
		IndexWriterConfig conf = new IndexWriterConfig(analyzer);
		IndexWriter writer = new IndexWriter(dir, conf);
		writer.deleteAll();

		if (Files.isDirectory(path)) {
			Files.walkFileTree(path, new SimpleFileVisitor<Path>() {
				@Override
				public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
					try {
						indexDoc(writer, file, attrs.lastModifiedTime());
					} catch (IOException ignore) {
						// don't index files that can't be read.
					}
					return FileVisitResult.CONTINUE;
				}
			});
		} else {
			indexDoc(writer, path, Files.getLastModifiedTime(path));
		}

	}// GEN-LAST:event_jbtnIndexActionPerformed

	/** Indexes a single document */
	static void indexDoc(IndexWriter writer, Path file, FileTime lastModified) throws IOException {
		Metadata metadata = new Metadata();
		ContentHandler handler = new BodyContentHandler();
		ParseContext context = new ParseContext();
		Parser parser = new AutoDetectParser();
		InputStream stream = new FileInputStream(file.toString());
		try {
			parser.parse(stream, handler, metadata, context);
		} catch (TikaException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} finally {
			stream.close();
		}

		String fileName = file.getFileName().toString();
		String text = handler.toString();
		// make a new, empty document
		Document doc = new Document();

		// Add the path of the file as a field named "path". Use a
		// field that is indexed (i.e. searchable), but don't tokenize
		// the field into separate words and don't index term frequency
		// or positional information:
		Field pathField = new StringField("path", file.toString(), Field.Store.YES);
		doc.add(pathField);

		int checkTitle = 0;
		for (String key : metadata.names()) {
			String name = key.toLowerCase();
			String value = metadata.get(key);

			if (StringUtils.isBlank(value)) {
				continue;
			}

			if ("title".equalsIgnoreCase(name)) {
				Field titleField = new StringField("title", value, Field.Store.YES);
				doc.add(titleField);
				checkTitle = 1;
			}
		}
		if (checkTitle == 0) {
			Field titleField = new StringField("title", fileName, Field.Store.YES);
			doc.add(titleField);
		}
		Field dateField = new StringField("date", lastModified.toString(), Field.Store.YES);
		doc.add(dateField);
		doc.add(new TextField("text", text, Field.Store.NO));
		if (writer.getConfig().getOpenMode() == OpenMode.CREATE) {
			// New index, so we just add the document (no old document can be there):
			System.out.println("adding " + file);
			writer.addDocument(doc);
		} else {
			// Existing index (an old copy of this document may have been indexed) so
			// we use updateDocument instead to replace the old one matching the exact
			// path, if present:
			System.out.println("updating " + file);
			writer.updateDocument(new Term("path", file.toString()), doc);
		}
		writer.commit();
		writer.deleteUnusedFiles();
		System.out.println(writer.maxDoc() + " documents written");
	}

	private void jbtnSearchActionPerformed(java.awt.event.ActionEvent evt) throws IOException, ParseException {// GEN-FIRST:event_jbtnSearchActionPerformed
		String indexDir = jtxtIndexDir.getText().trim();
		String queryText = jtxtQuery.getText().trim();

		// Add your code here to search file
		String field = "text";
		int hitsPerPage = 10;

		IndexReader reader = DirectoryReader.open(FSDirectory.open(Paths.get(indexDir)));
		IndexSearcher searcher = new IndexSearcher(reader);
		Analyzer analyzer = new StandardAnalyzer();
		TopScoreDocCollector collector = TopScoreDocCollector.create(hitsPerPage);
		
		DefaultTableModel model = new DefaultTableModel(new String[] { "File Name", "Score" }, 0);
		if (queryText.length() > 0) {
			// Build a Query object
			QueryParser parser = new QueryParser(field, analyzer);
			Query query = parser.parse(queryText);

			searcher.search(query, collector);
			// show result when the search is complete
			System.out.println("total hits: " + collector.getTotalHits());

			ScoreDoc[] hits = collector.topDocs().scoreDocs;
			for (ScoreDoc hit : hits) {
				Document doc = reader.document(hit.doc);
				Object[] rowData = { doc.get("title"), hit.score };
				model.addRow(rowData);
				System.out.println(doc.get("title") + "  (" + hit.score + ")");
			}
		}
		reader.close();
		jtblResults.setModel(model);
	}// GEN-LAST:event_jbtnSearchActionPerformed
	
	private void jbtnIndexDirBrowseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbtnIndexDirBrowseActionPerformed
		JFileChooser jfc = new JFileChooser();
		jfc.setCurrentDirectory(new java.io.File("."));
		jfc.setDialogTitle("Choose directory to store index files");
		jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		jfc.setAcceptAllFileFilterUsed(false);

		if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
			jtxtIndexDir.setText(jfc.getCurrentDirectory().getPath());
		}
	}// GEN-LAST:event_jbtnIndexDirBrowseActionPerformed

	private void jtblResultsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jtblResultsMouseClicked
		// Add your code here to search file to open file

	}// GEN-LAST:event_jtblResultsMouseClicked

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DesktopSearchEngineUI.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DesktopSearchEngineUI.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DesktopSearchEngineUI.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DesktopSearchEngineUI.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new DesktopSearchEngineUI().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jbtnDocsDirBrowse;
	private javax.swing.JButton jbtnIndex;
	private javax.swing.JButton jbtnIndexDirBrowse;
	private javax.swing.JButton jbtnSearch;
	private javax.swing.JLabel jlblDocsDir;
	private javax.swing.JLabel jlblIndexDir;
	private javax.swing.JLabel jlblQuery;
	private javax.swing.JPanel jpnlConfig;
	private javax.swing.JPanel jpnlResults;
	private javax.swing.JPanel jpnlSearch;
	private javax.swing.JScrollPane jscpResults;
	private javax.swing.JTable jtblResults;
	private javax.swing.JTextField jtxtDocsDir;
	private javax.swing.JTextField jtxtIndexDir;
	private javax.swing.JTextField jtxtQuery;
	// End of variables declaration//GEN-END:variables
}
